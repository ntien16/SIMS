DROP DATABASE SIMS;
CREATE DATABASE SIMS;
USE SIMS;

DROP TABLE [ADMIN]
DROP TABLE EMPLOYEES
DROP TABLE PRODUCT
DROP TABLE INVENTORY
DROP TABLE CUSTOMER
DROP TABLE SALES
DROP TABLE BILL
DROP TABLE  Exceptions
DROP TABLE ITEMSTAKEBACK
DROP TABLE DELETEBILL
--FUNCTION ADMIN
CREATE TABLE [ADMIN]
(
ADMINID INT PRIMARY KEY IDENTITY NOT NULL,
adminName VARCHAR(50) NOT NULL,
adminpassword VARCHAR(50) NOT NULL
)
CREATE TABLE ROLEZ
(
ROLEID INT PRIMARY KEY IDENTITY,
ROLENAME VARCHAR(50)
)
CREATE TABLE EMPLOYEES (
  EMPLOYEEID INT PRIMARY KEY IDENTITY NOT NULL,
  EMPLOYEENAME VARCHAR(50) NOT NULL,
  password VARCHAR(100)NOT NULL,
  ROLEID INT REFERENCES ROLEZ (ROLEID),
  PHONE VARCHAR(100) CONSTRAINT CHK_PHONE CHECK (PHONE NOT LIKE '%[^0-9]%'),
  ADDRESS VARCHAR(100)
);
--FUNCTION SALEMEN
--FUNCTION INVENTORYMANAGER
--FUNCTION SALE MANAGER
CREATE TABLE CATEGORY
(
CATEGORYID INT PRIMARY KEY IDENTITY,
CATEGORYNAME VARCHAR(100) NOT NULL
);
CREATE TABLE UNIT
(
UNITID INT PRIMARY KEY IDENTITY,
UNITNAME VARCHAR(25) NOT NULL
);
CREATE TABLE STATUZ
(
STATUSID INT PRIMARY KEY ,
STATUSNAME VARCHAR(50) NOT NULL
)
CREATE TABLE INVENTORY
(
Itemid INT CHECK (ItemId >= 1 AND ItemId <= 99999) PRIMARY KEY NOT NULL IDENTITY,
Itemname VARCHAR(255) NOT NULL,
CATEGORYID INT REFERENCES CATEGORY (CATEGORYID) NOT NULL,
UNITID INT REFERENCES UNIT (UNITID) NOT NULL,
CostPrice MONEY NOT NULL,
SellPrice MONEY NOT NULL,
INVENTORYQUANTITY INT CHECK( INVENTORYQUANTITY>=0 AND INVENTORYQUANTITY <= 99999 ) ,
STATUSID INT REFERENCES STATUZ (STATUSID)
 );
CREATE TABLE CUSTOMER
(
CustomerID INT PRIMARY KEY IDENTITY,
CustomerName	NVARCHAR (255) NOT NULL,
phoneNumber		VARCHAR(25) NOT NULL,
AddressCus		NVARCHAR(255) NOT NULL,
);
CREATE TABLE BILL
(
BillID		INT PRIMARY KEY IDENTITY NOT NULL,
CustomerId		INT NOT NULL REFERENCES CUSTOMER(CustomerId),
created_date	DATETIME DEFAULT GETDATE() NOT NULL,
EMPLOYEEID INT NOT NULL REFERENCES EMPLOYEES(EMPLOYEEID),
);
CREATE TABLE BILLDetail
(
BillID			INT NOT NULL  REFERENCES BILL(BillID) ,
ITEMID			INT NOT NULL REFERENCES  INVENTORY(ITEMID),
PRIMARY KEY (BillID,ITEMID) ,
QUANTITY		INT NOT NULL DEFAULT 1,
DISCOUNT		INT,
STATUZ	VARCHAR(100) NOT NULL,
);

--inform the sales manager about any exceptions (such as an item is being purchased, but it is not available in the system)
CREATE TABLE Exceptions (
ExceptionId INT PRIMARY KEY IDENTITY,
ExceptionDate DATETIME default GETDATE() NOT NULL,
EMPLOYEEID INT NOT NULL REFERENCES EMPLOYEES(EMPLOYEEID)
);
--CREATE TABLE EXCEPTIONSDETAIL
CREATE TABLE EXCEPTIONSDETAIL
(
ExceptionId INT NOT NULL REFERENCES Exceptions(ExceptionId),
ITEMID INT NOT NULL REFERENCES INVENTORY(ITEMID) ,
PRIMARY KEY (ExceptionId,ITEMID),
ExceptionType VARCHAR(255)
)
--CREATE TABLE ITEM TAKE BACK

CREATE TABLE ITEMSTAKEBACK
(
ITEMTKID INT PRIMARY KEY IDENTITY,
BILLID INT NOT NULL REFERENCES BILL(BILLID),
CUSTOMERID INT NOT NULL REFERENCES CUSTOMER (CUSTOMERID),
CANCELDATE DATETIME DEFAULT GETDATE(),

);

--CREATE TABLE ITEMSTAKEBACKDETAIL
CREATE TABLE ITEMSTAKEBACKDETAIL
(
ITEMTKID INT REFERENCES ITEMSTAKEBACK(ITEMTKID),
ITEMID INT NOT NULL REFERENCES INVENTORY(ITEMID),
PRIMARY KEY (ITEMTKID,ITEMID),
QUANTITY INT NOT NULL,
statuz varchar(100) DEFAULT 'Returned'
);

--CREATE TABLE DELETE INVOICE

CREATE TABLE  DELETEBILL
(
DELETEBILLID INT PRIMARY KEY IDENTITY,
BILLID INT NOT NULL ,
DELETEDATE DATETIME DEFAULT GETDATE(),
statuz varchar(50) default 'Deleted'
);

--INVENTORY MANAGER
--CREATE TABLE SUPPILER
CREATE TABLE SUPPLIER
(
supplierid INT NOT NULL PRIMARY KEY IDENTITY,
suppilerName varchar(255) not null,
suppilerphone VARCHAR(100) not null,
suppilerAddress VARCHAR(255)
)
--CREATE TABLE IMPORT ITEMS
CREATE TABLE IMPORTITEMS
(
Importid INT NOT NULL PRIMARY KEY IDENTITY,
EMPLOYEEID INT NOT NULL REFERENCES EMPLOYEES (EMPLOYEEID),
SUPPLIERID INT NOT NULL REFERENCES SUPPLIER (SUPPLIERID),
importdate DATETIME default getdate() not null

);
--CREATE TABLE REPORT
--inform the inventory manager about the items that are not available, so that they can be stocked
CREATE TABLE REPORT
(
REPORTID INT PRIMARY KEY IDENTITY,
CONTENTREPORT VARCHAR(255),
EMPLOYEEID INT REFERENCES EMPLOYEES(EMPLOYEEID),
REPORTDATE DATETIME default getdate() not null
)
CREATE TABLE IMPORTDETAIL
(
    Importid INT REFERENCES IMPORTITEMS(Importid) NOT NULL ,
    ITEMID INT REFERENCES INVENTORY(ITEMID) NOT NULL,
    PRIMARY KEY (IMPORTID, ITEMID),
    QUANTITY INT NOT NULL DEFAULT 1
);

-- ---------------------------------INSERT DATA INTO TABLE----------------------------------------------
-- INSERT DATA INTO TABLE BILL

-- INSERT DATA INTO TABLE CATEGORY
INSERT INTO CATEGORY (CATEGORYNAME) VALUES ('FRUIT'), ('DRINK'), ('CONFECTIONARY');
SELECT*FROM CATEGORY
--INSERT DATA INTO TABLE UNIT
INSERT INTO UNIT (UNITNAME)
VALUES ('KG'),('PACKET'),('CARTON'),('BOTTLE'),('CAN')
SELECT*FROM UNIT
-- INSERT DATA INTO TABLE ROLEZ
INSERT INTO ROLEZ (ROLENAME)
VALUES ('SALEMANGER'),('INVENTORYMANAGER'),('SALESMAN')
SELECT*FROM ROLEZ
-- INSERT DATA INTO TABLE employees
INSERT INTO employees(EMPLOYEENAME,password,ROLEID,PHONE,ADDRESS)
VALUES 
	   ('Username1','MTIzNDU2',1,'0932123456','ABC STREET VIETNAM'),
	   ('Username2','MTIzNDU2',2,'0913123456','BCD STREET VIETNAM'),
	   ('Username3','MTIzNDU2',3,'0911234567','CDE STREET VIETNAM')

SELECT EMP.EMPLOYEENAME,EMP.PHONE,EMP.ADDRESS,R.ROLENAME FROM employees AS EMP JOIN ROLEZ R ON EMP.ROLEID=R.ROLEID
SELECT * FROM employees AS EMP JOIN ROLEZ AS R ON EMP.ROLEID=R.ROLEID 
INSERT INTO STATUZ (STATUSID,STATUSNAME)
VALUES (0,'NOT AVAILABLE'),(1,'AVAILABLE')
--INSERT DATA INTO TABLE INVENTORY
 --VALUES 1('UNT','KG'),2('UNT','PACKET'),3('UNT','CARTON'),4('UNT','BOTTLE'),5('UNT','CAN')
 --1('CAT','FRUIT'), 2('CAT','DRINK'), 3('CAT','CONFECTIONARY');
 INSERT INTO INVENTORY (Itemname,CATEGORYID,UNITID,CostPrice,SellPrice,INVENTORYQUANTITY,STATUSID)
 VALUES ('APPLE',1,1,25000,35000,1000,1),
		('BANANA',1,1,25000,30000,1000,1),
		('PEACH',1,1,55000,70000,1000,1),
		('COCACOLA',2,5,5000,10000,1000,1),
		('PEPSI',2,5,5000,10000,1000,1),
		('SOJU WINE',2,4,9500,13000,1000,1),
		('ORANGE FRUIT',2,3,100000,120000,200,1),
		('LAVIE',2,4,3900,5000,1000,1),
		('TIGER SOJU',2,3,320000,393000,250,1),
		('HEINEKEN SLEEK',2,3,395000,445000,300,1),
		('LARUE BEER',2,3,200000,265000,300,1),
		('STRONGBOW APPLE',2,5,60000,75000,500,1),
		('RED WINE',2,4,125000,175000,200,1),
		('SOJU KORICE',2,4,57000,68000,250,1),
		('CHUPA CHUPS CANDY',3,2,10000,14000,300,1),
		('FRUIT CANDY',3,2,20000,29000,300,1),
		('SNACK CRAB',3,2,5500,10000,350,1),
		('LAY POTATO',3,2,16500,21000,350,1),
		('LAY SEAWEED POTATO',3,2,18500,25000,350,1),
		('OSTAR PREMIUM',3,2,5500,10000,350,1)

SELECT  INV.Itemname, CAT.CATEGORYNAME, UNT.UNITNAME, INV.CostPrice, INV.SELLPRICE, INV.STATUSID, INV.INVENTORYQUANTITY, 
SUM(INV.COSTPRICE*INV.INVENTORYQUANTITY)AS TOTALAMOUNT
FROM INVENTORY AS INV
JOIN CATEGORY AS CAT ON INV.CATEGORYID=CAT.CATEGORYID
JOIN UNIT AS UNT ON UNT.UNITID=INV.UNITID
GROUP BY  INV.Itemname, CAT.CATEGORYNAME, UNT.UNITNAME, INV.CostPrice, INV.SELLPRICE, INV.STATUSID, INV.INVENTORYQUANTITY 

--INSERT DATA INTO TABLE CUSTOMER 
INSERT INTO CUSTOMER(CustomerName,phoneNumber,AddressCus)
VALUES ('LAB GROCERY',0123456789,'51 Stonegate STREET,YORK CITY, ENGLAND'),
	   ('GREEN GROCERY',0987654321,'12 Bootham STREET,MANCHESTER CITY, ENGLAND'), 	
	   ('DAVID STONE',0321654987,'05 Pavement STREET,MANCHESTER CITY, ENGLAND')
SELECT*FROM CUSTOMER
-- INSERT DATA INTO TABLE BILL
INSERT INTO BILL(CustomerId,created_date,EMPLOYEEID)
VALUES	(1,'2023-09-01',3),
		(2,'2023-09-09',3),
		(3,'2023-09-11',3)
SELECT*FROM BILL
--INSERT DATA INTO TABLE BILLDETAIL
INSERT INTO BILLDetail (BILLID,ITEMID,QUANTITY,DISCOUNT,STATUZ)
VALUES	(1,10,10,0,'complete'),
		(1,8,10,0,'complete'),
		(1,9,10,0,'complete'),
		(2,7,5,0,'complete'),
		(2,11,10,0,'complete'),
		(2,15,10,0,'complete'),
		(3,5,5,0,'complete'),
		(3,12,5,0,'complete'),
		(3,14,10,0,'complete')
		select*from BILLDetail
SELECT INV.Itemname,INV.SellPrice,BD.QUANTITY,(BD.QUANTITY*INV.SellPrice)AS TOTALAMOUNT
FROM BILLDetail AS BD JOIN BILL AS B ON B.BillID=BD.BillID JOIN INVENTORY INV ON INV.Itemid=BD.ITEMID
GROUP BY  INV.Itemname,INV.SellPrice,BD.QUANTITY
select*from BILLDetail
select*from bill where customerid=2 and EMPLOYEEID=3

-- INSERT DATA INTO TABLE ITEMS TAKE BACK
INSERT INTO ITEMSTAKEBACK (BILLID,CUSTOMERID,CANCELDATE)
VALUES (2,2,'2023-09-10'),
	  (3,3,'2023-09-12')
	  
-- INSERT DATA INTO TABLE ITEMS TAKE BACK DETAIL

INSERT INTO ITEMSTAKEBACKDETAIL(ITEMTKID,ITEMID,QUANTITY)
VALUES (1,8,5),
	   (1,5,5),
	   (2,14,2),
	   (2,12,1)
SELECT*FROM ITEMSTAKEBACK where CUSTOMERID=2
-- INSERT DATA INTO TABLE DELETEBILL

SELECT*FROM DELETEBILL
--INSERT DATA INTO TABLE SUPPLIER.
INSERT INTO SUPPLIER ( suppilerName,suppilerphone,suppilerAddress)
VALUES	 ('ABC COMPANY',840012345,'VIETNAM'),
		 ('BCD COMPANY',84123456,'VIETNAM'),
		 ('CDE COMPANY',82123456,'MALYAYSIA')
SELECT*FROM SUPPLIER
INSERT INTO ADMIN (ADMINNAME,ADMINPASSWORD)
VALUES ('Admin','MTIzNDU2')

SELECT*FROM ADMIN
--INSERT DATA INTO TABLE EXCEPTIONS
INSERT INTO Exceptions (ExceptionDate,EMPLOYEEID)
VALUES ('2023-8-25',3),
		('2023-8-28',3),
		('2023-8-30',3),
		('2023-9-01',3),
		('2023-9-03',3)
INSERT INTO EXCEPTIONSDETAIL(exceptionid,itemid,exceptionType)
VALUES (1,9,'The item is lacking'),
		(1,10,'The item is lacking'),
		(2,14,'The item is lacking'),
		(2,20,'The item is lacking'),
		(3,15,'The item is lacking'),
		(3,2,'The item is lacking'),
		(4,8,'The item is lacking'),
		(4,6,'The item is lacking'),
		(4,18,'The item is lacking'),
		(5,16,'The item is lacking'),
		(5,7,'The item is lacking')

SELECT*FROM BILL
SELECT*FROM BILLDetail
select*from DELETEBILL

--ALTER TABLE ITEMSTAKEBACK
--ADD CONSTRAINT FK_ITEMSTAKE_BILL
--FOREIGN KEY (BILLID) REFERENCES BILL(BILLID) ON DELETE CASCADE;
-- ----------------------------------------CREATE TRIGGER AUTO UPDATE INTO TABLES--------------------------------
-- CREATE TRIGGER AUTO INSERT INTO TABLE DELETEBILL AFTER DELETE SALE ON TABLE SALE
--DROP TRIGGER trg_AfterDeleteBill
CREATE TRIGGER trg_AfterDeleteBill
ON BILL
AFTER DELETE
AS
BEGIN
    INSERT INTO DELETEBILL (BILLID, DELETEDATE)
    SELECT deleted.BillID, GETDATE()
    FROM deleted;
END;
select*from DELETEBILL


---Update inventoryquantity after create bill---
CREATE TRIGGER TRIG_UPDATE_INVENTORY
ON BILLDetail
AFTER INSERT
AS
BEGIN
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY - D.QUANTITY
    FROM INVENTORY I
    JOIN INSERTED D ON I.ItemId = D.ITEMID;
END;

---Update inventoryquantity after delete bill---
--drop  TRIGGER TRIG_UPDATE_INVENTORY_Delete
CREATE TRIGGER TRIG_UPDATE_INVENTORY_Delete
ON BILLDetail
AFTER DELETE
AS
BEGIN
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY + D.QUANTITY
    FROM INVENTORY I
    JOIN deleted D ON I.ItemId = D.ITEMID;
END;

---Update inventoryquantity if item=0---
--drop TRIGGER UpdateStatusToNotAvailable
CREATE TRIGGER UpdateStatusToNotAvailable
ON INVENTORY
AFTER UPDATE
AS
BEGIN
    IF UPDATE(INVENTORYQUANTITY)
    BEGIN
        UPDATE INVENTORY
        SET STATUSID =0
        FROM INSERTED i
        WHERE INVENTORY.Itemid = i.Itemid
            AND i.INVENTORYQUANTITY = 0;
    END
END;



---Update inventoryquantity if item>0---
--drop trigger  UpdateStatusToAvailable
CREATE TRIGGER UpdateStatusToAvailable
ON INVENTORY
AFTER UPDATE
AS
BEGIN
    IF UPDATE(INVENTORYQUANTITY)
    BEGIN
        UPDATE INVENTORY
        SET STATUSID =1
        FROM INSERTED i
        WHERE INVENTORY.Itemid = i.Itemid
            AND i.INVENTORYQUANTITY > 0;
    END
END;

---Update inventoryquantity after create ImportItem---
CREATE TRIGGER TRIG_UPDATE_INVENTORY_InSERT_IMPORTDETAIL
ON IMPORTDETAIL
AFTER INSERT
AS
BEGIN
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY + D.QUANTITY
    FROM INVENTORY I
    JOIN INSERTED D ON I.ItemId = D.ITEMID;
END;
---Update inventoryquantity after delete ImportDetail---
--drop  TRIGGER TRIG_UPDATE_INVENTORY_Delete
CREATE TRIGGER RIG_UPDATE_INVENTORY_DELETE_IMPORTDETAIL
ON IMPORTDETAIL
AFTER DELETE
AS
BEGIN
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY - D.QUANTITY
    FROM INVENTORY I
    JOIN deleted D ON I.ItemId = D.ITEMID;
END;
 -- create trigger update greater than or less than quantity
CREATE TRIGGER TRIG_UPDATE_INVENTORY_UPDATE_IMPORTDETAIL
ON IMPORTDETAIL
AFTER UPDATE
AS
BEGIN
    -- Update  INVENTORYQUANTITY when quantity Update greater than quantity Insert
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY + (D.QUANTITY - (SELECT QUANTITY FROM DELETED))
    FROM INVENTORY I
    JOIN INSERTED D ON I.Itemid = D.ITEMID
    WHERE D.QUANTITY > (SELECT QUANTITY FROM DELETED);

    -- Update  INVENTORYQUANTITY when quantity Update less than quantity Insert
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY - ((SELECT QUANTITY FROM DELETED) - D.QUANTITY)
    FROM INVENTORY I
    JOIN INSERTED D ON I.Itemid = D.ITEMID
    WHERE D.QUANTITY < (SELECT QUANTITY FROM DELETED);
END;
----------------Trigger Delete Item take back-------------
CREATE TRIGGER Delete_ITTB
ON ITEMSTAKEBACKDETAIL
AFTER DELETE
AS 
BEGIN
    UPDATE BD
    SET QUANTITY = BD.QUANTITY + D.QUANTITY
    FROM BILLDETAIL BD 
    JOIN DELETED D ON BD.ITEMID = D.ITEMID
END;
---------------Trigger Insert Item TakeBack----------------
----Update data in Inventory table-------------------------
CREATE TRIGGER TRG_UpdateInventoryAndBillDetail
ON ITEMSTAKEBACKDETAIL
AFTER INSERT
AS
BEGIN
    -- Update INVENTORY
    UPDATE INVENTORY
    SET INVENTORYQUANTITY = INVENTORYQUANTITY + i.QUANTITY
    FROM INVENTORY
    INNER JOIN inserted i ON INVENTORY.Itemid = i.ITEMID;

    -- Update BILLDetail
    UPDATE BILLDetail
    SET BILLDetail.QUANTITY = BILLDetail.QUANTITY - i.QUANTITY
    FROM BILLDetail
	INNER JOIN ITEMSTAKEBACK ITM ON ITM.BILLID=BILLDetail.BillID
    INNER JOIN inserted i ON ITM.ITEMTKID = i.ITEMTKID
    AND BILLDetail.ITEMID = i.ITEMID;
END;
--------------------------TRigger Update ITEMTAKEBACKDETAIL-----------
CREATE TRIGGER TRIGGER_UPDATE_INVENTORY_AND_BILLDETAIL
ON ITEMSTAKEBACKDETAIL
AFTER UPDATE 
AS
BEGIN
    -- Update Inventory Quantity when the quantity increases
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY + (D.QUANTITY - O.QUANTITY)
    FROM INVENTORY I
    JOIN INSERTED D ON I.Itemid = D.ITEMID
    JOIN DELETED O ON I.Itemid = O.ITEMID
    WHERE D.QUANTITY > O.QUANTITY;

    -- Update BillDetail Quantity when the quantity increases
    UPDATE BD
    SET BD.QUANTITY = BD.QUANTITY - (I.QUANTITY - O.QUANTITY)
    FROM BILLDetail BD
    JOIN ITEMSTAKEBACK ITTB ON BD.BillID=ITTB.BILLID
	JOIN INSERTED I ON  BD.ITEMID = I.ITEMID
    JOIN DELETED O ON  BD.ITEMID = O.ITEMID
    WHERE I.QUANTITY > O.QUANTITY;

    -- Update Inventory Quantity when the quantity decreases
    UPDATE I
    SET I.INVENTORYQUANTITY = I.INVENTORYQUANTITY - (O.QUANTITY - D.QUANTITY)
    FROM INVENTORY I
    JOIN INSERTED D ON I.Itemid = D.ITEMID
    JOIN DELETED O ON I.Itemid = O.ITEMID
    WHERE D.QUANTITY < O.QUANTITY;

    -- Update BillDetail Quantity when the quantity decreases
    UPDATE BD
    SET BD.QUANTITY = BD.QUANTITY + (O.QUANTITY - I.QUANTITY)
    FROM BILLDetail BD
    JOIN ITEMSTAKEBACK ITTB ON BD.BillID=ITTB.BILLID
	JOIN INSERTED I ON  BD.ITEMID = I.ITEMID
    JOIN DELETED O ON  BD.ITEMID = O.ITEMID
    WHERE I.QUANTITY < O.QUANTITY;
END;




select*from BILL 

SELECT I.itemname, I.SellPrice * BD.Quantity AS amount, COUNT(*) AS statistic
FROM BILLDetail BD 
JOIN INVENTORY I ON I.Itemid = BD.ITEMID
GROUP BY I.itemname, I.SellPrice * BD.Quantity;